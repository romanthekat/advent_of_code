/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package task_8

import java.io.File

class App(private val width: Int, private val height: Int) {
    fun solveFirst(input: List<Int>): Int {
        val image = getImage(input)

        var minZerosCount = width * height + 1
        var minZerosLayer: List<Int> = image.layers[0]
        for (layer in image.layers) {
            val zerosCount = digitCount(layer, 0)
            if (zerosCount < minZerosCount) {
                minZerosCount = zerosCount
                minZerosLayer = layer
            }
        }

        return digitCount(minZerosLayer, 1) * digitCount(minZerosLayer, 2)
    }

    fun solveSecond(input: List<Int>): List<Int> {
        val image = getImage(input)

        val generateResultLayer = image.generateResultLayer()
        generateResultLayer.printLayer(width)

        return generateResultLayer
    }

    private fun digitCount(layer: List<Int>, digit: Int) = layer.count { it == digit }

    private fun getImage(input: List<Int>): Image {
        val image = Image(width, height)

        var layer = image.newLayer()

        var pixelNum = 0
        for (pixel in input) {
            if (pixelNum == width * height) {
                layer = image.newLayer()
                pixelNum = 0
            }

            layer.add(pixel)
            pixelNum++
        }

        return image
    }
}

class Image(private val width: Int, private val height: Int) {
    val layers = mutableListOf<MutableList<Int>>()

    fun newLayer(): MutableList<Int> {
        val newLayer = mutableListOf<Int>()

        layers.add(newLayer)

        return newLayer
    }

    fun generateResultLayer(): List<Int> {
        val resultLayer = mutableListOf<Int>()

        for (index in 0 until height * width) {
            var resultPixel = -1

            for (layer in layers) {
                val pixel = layer[index]
                if (pixel.isTransparent()) {
                    continue
                } else {
                    resultPixel = pixel
                    break
                }
            }

            resultLayer.add(resultPixel)
        }

        return resultLayer
    }
}

fun Int.isTransparent(): Boolean {
    return this == 2
}

fun List<Int>.printLayer(width: Int) {
    var index = 0

    for (pixel in this) {
        if (index == width) {
            println()
            index = 0
        }

        print(if (pixel == 1) "â–ˆ" else " ")
        index++
    }

    println()
}


fun main() {
    val app = App(25, 6)
    val input = File("input.txt").readLines()[0].map { it.toString().toInt() }

    println(app.solveFirst(input))
    println(app.solveSecond(input))
}